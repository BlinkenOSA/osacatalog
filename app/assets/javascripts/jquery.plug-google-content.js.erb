(function($) {
  /*
    jQuery plugin to render Google book covers for image elements

      Usage: $(selector).renderGoogleBookCovers();

    This plugin :
      - collects all 'img.cover-image' elements and batches them
      - using ISBN, OCLC & LCCN value(s) of image elements inside each batch,
        Google cover images are added using Google Books API
  */

  $.fn.plugGoogleBookContent = function() {
    var $parent,
      booksPerAjaxCall = 25,
      booksApiUrl = 'https://books.google.com/books?jscmd=viewapi&bibkeys=',
      selectorCoverImg = 'div.blacklight-library img.cover-image',
      batches = [];

    function init() {
      var listCoverImgs = $parent.find(selectorCoverImg),
        totalCovers = listCoverImgs.length;

      // batch by batch-cutoff value
      while (totalCovers > 0) {
        batches.push(listCoverImgs.splice(0, booksPerAjaxCall));
        totalCovers = listCoverImgs.length;
      }

      addBookCoversByBatch();

    }

    function addBookCoversByBatch() {
      $.each(batches, function(index, batch) {
        var bibkeys = getBibKeysForBatch(batch),
          batchBooksApiUrl = booksApiUrl + bibkeys;

        $.ajax({
          type: 'GET',
          url: batchBooksApiUrl,
          contentType: "application/json",
          dataType: 'jsonp',

          success: function(json) {
            renderCoverPanel(bibkeys, json);
          },

          error: function(e) {
            console.log(e);
            renderEmptyCoverImages(bibkeys);
          }
        });
      });
    }

    function renderEmptyCoverImages(bibkeys) {
      var bibarray = bibkeys.split(',');

      $.each(bibarray, function(index, bibkey) {
        renderEmptyCoverImage(bibkey);
      });
    }

    function renderCoverPanel(bibkeys, json) {
      var bibarray = bibkeys.split(',');

      $.each(bibarray, function(index, bibkey) {
        if(json[bibkey]) {
          if(typeof json[bibkey].thumbnail_url !== 'undefined') {
            renderCoverImage(bibkey, json[bibkey]);
            return;
          } else {
            renderEmptyCoverImage(bibkey);
            return;
          }
        } else {
          renderEmptyCoverImage(bibkey);
          return;
        }
      });
    }

    function renderEmptyCoverImage(bibkey) {
      var thumbUrl = "<%= asset_path('thumbnail_placeholder_book.jpg') %>";
      var selectorCoverImg = 'img.' + bibkey;

      var imageEl = $parent.find(selectorCoverImg);

      // Only set the thumb src if it's not already set
      if(typeof imageEl.attr('src') === 'undefined') {
        imageEl
          .attr('src', thumbUrl)
          .removeClass('hide')
          .addClass('show');

        imageEl.parent().parent().find('span.fake-cover')
          .addClass('hide');
      }
    }

    function renderCoverImage(bibkey, data) {
      var thumbUrl = data.thumbnail_url,
          selectorCoverImg = 'img.' + bibkey;

      thumbUrl = thumbUrl.replace(/zoom=5/, 'zoom=1');
      thumbUrl = thumbUrl.replace(/&?edge=curl/, '');

      var imageEl = $parent.find(selectorCoverImg);

      // Only set the thumb src if it's not already set
      if(typeof imageEl.attr('src') === 'undefined') {
        imageEl
          .attr('src', thumbUrl)
          .removeClass('hide')
          .addClass('show');

        imageEl.parent().parent().find('span.fake-cover')
          .addClass('hide');
      }
    }

    function getBibKeysForBatch(batch) {
      var bibkeys = '';

      $.each(batch, function(index) {
        var $CoverImg = $(this),
          isbn = $CoverImg.data('isbn') || '';

        if(isbn) {
          bibkeys += [isbn].join(',') + ',';
        }

      });

      bibkeys = bibkeys.replace(/,,/g, ',');
      bibkeys = bibkeys.replace(/,$/g, '');

      return bibkeys;
    }

    return this.each(function() {
      $parent = $(this);
      init();
    });
  };

})(jQuery);
